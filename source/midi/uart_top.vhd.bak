-- Copyright (C) 2020  Intel Corporation. All rights reserved.
-- Your use of Intel Corporation's design tools, logic functions 
-- and other software and tools, and any partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Intel Program License 
-- Subscription Agreement, the Intel Quartus Prime License Agreement,
-- the Intel FPGA IP License Agreement, or other applicable license
-- agreement, including, without limitation, that your use is for
-- the sole purpose of programming logic devices manufactured by
-- Intel and sold by Intel or its authorized distributors.  Please
-- refer to the applicable agreement for further details, at
-- https://fpgasoftware.intel.com/eula.

-- PROGRAM		"Quartus Prime"
-- VERSION		"Version 20.1.1 Build 720 11/11/2020 SJ Lite Edition"
-- CREATED		"Sat Dec 18 13:13:59 2021"

LIBRARY ieee;
USE ieee.std_logic_1164.all; 

LIBRARY work;

ENTITY uart_top IS 
	PORT
	(
		CLOCK_50 :  IN  STD_LOGIC;
		KEY_0 :  IN  STD_LOGIC;
		ARDUINO_IO_11 :  IN  STD_LOGIC;
		LEDR_9 :  OUT  STD_LOGIC;
		ARDUINO_IO_12 :  OUT  STD_LOGIC;
		ARDUINO_IO_10 :  OUT  STD_LOGIC;
		HEX0 :  OUT  STD_LOGIC_VECTOR(6 DOWNTO 0);
		HEX1 :  OUT  STD_LOGIC_VECTOR(6 DOWNTO 0)
	);
END uart_top;

ARCHITECTURE bdf_type OF uart_top IS 

COMPONENT flanken_detekt_vhdl
	PORT(data_in : IN STD_LOGIC;
		 clk : IN STD_LOGIC;
		 reset_n : IN STD_LOGIC;
		 rising_pulse : OUT STD_LOGIC;
		 falling_pulse : OUT STD_LOGIC
	);
END COMPONENT;

COMPONENT signal_checker
	PORT(clk : IN STD_LOGIC;
		 reset_n : IN STD_LOGIC;
		 data_in : IN STD_LOGIC;
		 led_blink : OUT STD_LOGIC
	);
END COMPONENT;

COMPONENT bus_hex2sevseg
	PORT(data_in : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
		 seg_o : OUT STD_LOGIC_VECTOR(6 DOWNTO 0)
	);
END COMPONENT;

COMPONENT baud_tick
	PORT(clk : IN STD_LOGIC;
		 reset_n : IN STD_LOGIC;
		 start_bit : IN STD_LOGIC;
		 baud_tick : OUT STD_LOGIC
	);
END COMPONENT;

COMPONENT clock_sync
	PORT(data_in : IN STD_LOGIC;
		 clk : IN STD_LOGIC;
		 sync_out : OUT STD_LOGIC
	);
END COMPONENT;

COMPONENT bit_counter
	PORT(clk : IN STD_LOGIC;
		 reset_n : IN STD_LOGIC;
		 start_bit : IN STD_LOGIC;
		 baud_tick : IN STD_LOGIC;
		 bit_count : OUT STD_LOGIC_VECTOR(3 DOWNTO 0)
	);
END COMPONENT;

COMPONENT uart_controller_fsm
	PORT(clk : IN STD_LOGIC;
		 reset_n : IN STD_LOGIC;
		 falling_pulse : IN STD_LOGIC;
		 baud_tick : IN STD_LOGIC;
		 bit_count : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
		 parallel_data : IN STD_LOGIC_VECTOR(9 DOWNTO 0);
		 shift_enable : OUT STD_LOGIC;
		 start_bit : OUT STD_LOGIC;
		 data_valid : OUT STD_LOGIC
	);
END COMPONENT;

COMPONENT shiftreg_uart
GENERIC (width : INTEGER
			);
	PORT(clk : IN STD_LOGIC;
		 reset_n : IN STD_LOGIC;
		 load_in : IN STD_LOGIC;
		 shift_en : IN STD_LOGIC;
		 serial_in : IN STD_LOGIC;
		 parallel_in : IN STD_LOGIC_VECTOR(9 DOWNTO 0);
		 serial_out : OUT STD_LOGIC;
		 parallel_out : OUT STD_LOGIC_VECTOR(9 DOWNTO 0)
	);
END COMPONENT;

COMPONENT output_register
	PORT(clk : IN STD_LOGIC;
		 reset_n : IN STD_LOGIC;
		 data_valid : IN STD_LOGIC;
		 parallel_in : IN STD_LOGIC_VECTOR(9 DOWNTO 0);
		 hex_lsb_out : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		 hex_msb_out : OUT STD_LOGIC_VECTOR(3 DOWNTO 0)
	);
END COMPONENT;

COMPONENT modulo_divider
	PORT(clk : IN STD_LOGIC;
		 clk_div : OUT STD_LOGIC
	);
END COMPONENT;

SIGNAL	paralle_data :  STD_LOGIC_VECTOR(9 DOWNTO 0);
SIGNAL	SYNTHESIZED_WIRE_28 :  STD_LOGIC;
SIGNAL	SYNTHESIZED_WIRE_29 :  STD_LOGIC;
SIGNAL	SYNTHESIZED_WIRE_30 :  STD_LOGIC;
SIGNAL	SYNTHESIZED_WIRE_3 :  STD_LOGIC_VECTOR(3 DOWNTO 0);
SIGNAL	SYNTHESIZED_WIRE_31 :  STD_LOGIC;
SIGNAL	SYNTHESIZED_WIRE_32 :  STD_LOGIC;
SIGNAL	SYNTHESIZED_WIRE_15 :  STD_LOGIC;
SIGNAL	SYNTHESIZED_WIRE_17 :  STD_LOGIC_VECTOR(3 DOWNTO 0);
SIGNAL	SYNTHESIZED_WIRE_20 :  STD_LOGIC;
SIGNAL	SYNTHESIZED_WIRE_21 :  STD_LOGIC;
SIGNAL	SYNTHESIZED_WIRE_23 :  STD_LOGIC_VECTOR(0 TO 9);
SIGNAL	SYNTHESIZED_WIRE_26 :  STD_LOGIC;
SIGNAL	SYNTHESIZED_WIRE_27 :  STD_LOGIC_VECTOR(3 DOWNTO 0);


BEGIN 
ARDUINO_IO_12 <= KEY_0;
ARDUINO_IO_10 <= '0';
SYNTHESIZED_WIRE_20 <= '0';
SYNTHESIZED_WIRE_23 <= "0000000000";



b2v_inst : flanken_detekt_vhdl
PORT MAP(data_in => SYNTHESIZED_WIRE_28,
		 clk => SYNTHESIZED_WIRE_29,
		 reset_n => SYNTHESIZED_WIRE_30,
		 falling_pulse => SYNTHESIZED_WIRE_15);


b2v_inst1 : signal_checker
PORT MAP(clk => CLOCK_50,
		 reset_n => KEY_0,
		 data_in => ARDUINO_IO_11,
		 led_blink => LEDR_9);


b2v_inst10 : bus_hex2sevseg
PORT MAP(data_in => SYNTHESIZED_WIRE_3,
		 seg_o => HEX1);


b2v_inst11 : baud_tick
PORT MAP(clk => SYNTHESIZED_WIRE_29,
		 reset_n => SYNTHESIZED_WIRE_30,
		 start_bit => SYNTHESIZED_WIRE_31,
		 baud_tick => SYNTHESIZED_WIRE_32);




b2v_inst15 : clock_sync
PORT MAP(data_in => KEY_0,
		 clk => SYNTHESIZED_WIRE_29,
		 sync_out => SYNTHESIZED_WIRE_30);


b2v_inst16 : clock_sync
PORT MAP(data_in => ARDUINO_IO_11,
		 clk => SYNTHESIZED_WIRE_29,
		 sync_out => SYNTHESIZED_WIRE_28);


b2v_inst2 : bit_counter
PORT MAP(clk => SYNTHESIZED_WIRE_29,
		 reset_n => SYNTHESIZED_WIRE_30,
		 start_bit => SYNTHESIZED_WIRE_31,
		 baud_tick => SYNTHESIZED_WIRE_32,
		 bit_count => SYNTHESIZED_WIRE_17);



b2v_inst5 : uart_controller_fsm
PORT MAP(clk => SYNTHESIZED_WIRE_29,
		 reset_n => SYNTHESIZED_WIRE_30,
		 falling_pulse => SYNTHESIZED_WIRE_15,
		 baud_tick => SYNTHESIZED_WIRE_32,
		 bit_count => SYNTHESIZED_WIRE_17,
		 parallel_data => paralle_data,
		 shift_enable => SYNTHESIZED_WIRE_21,
		 start_bit => SYNTHESIZED_WIRE_31,
		 data_valid => SYNTHESIZED_WIRE_26);


b2v_inst6 : shiftreg_uart
GENERIC MAP(width => 10
			)
PORT MAP(clk => SYNTHESIZED_WIRE_29,
		 reset_n => SYNTHESIZED_WIRE_30,
		 load_in => SYNTHESIZED_WIRE_20,
		 shift_en => SYNTHESIZED_WIRE_21,
		 serial_in => SYNTHESIZED_WIRE_28,
		 parallel_in => SYNTHESIZED_WIRE_23,
		 parallel_out => paralle_data);


b2v_inst7 : output_register
PORT MAP(clk => SYNTHESIZED_WIRE_29,
		 reset_n => SYNTHESIZED_WIRE_30,
		 data_valid => SYNTHESIZED_WIRE_26,
		 parallel_in => paralle_data,
		 hex_lsb_out => SYNTHESIZED_WIRE_27,
		 hex_msb_out => SYNTHESIZED_WIRE_3);


b2v_inst8 : bus_hex2sevseg
PORT MAP(data_in => SYNTHESIZED_WIRE_27,
		 seg_o => HEX0);


b2v_inst9 : modulo_divider
PORT MAP(clk => CLOCK_50,
		 clk_div => SYNTHESIZED_WIRE_29);


END bdf_type;